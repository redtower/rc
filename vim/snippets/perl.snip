snippet u
    #!/usr/bin/env perl
    use 5.10.0;
    use strict;
    use warnings;

snippet d
    use Data::Dump qw(dump);
    warn dump 

snippet dd
    use Data::Dumper;
    local $Data::Dumper::Indent = 1;
    local $Data::Dumper::Terse  = 1;
    warn Dumper 

snippet p
    use Data::Dumper;
    local $Data::Dumper::Indent = 1;
    local $Data::Dumper::Terse  = 1;
    sub p { warn Dumper $_[0] }

snippet dds
    use Data::Dump::Streamer qw(Dumper);
    warn Dumper 

snippet c
    use Carp qw/croak/;

snippet n
    sub new {
        my $class = shift;
        my $args = ref $_[0] ? $_[0] : +{@_};

        ${1:code}

        bless $args, $class;
    }

snippet l
    use Class::Accessor::Lite

snippet ll
    Clas::Accessor::Lite->mk_accessors(${1:accessors});

snippet t
    #!/usr/bin/env perl -w
    use strict;
    use Test::More;

    subtest => sub {
    };

    done_testing;

snippet s
    my ($self) = @_;

snippet st
    subtest '${1:testname}' => sub {
        ${2:testbody}
    };

snippet html
    <!DOCTYPE HTML>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <title></title>
    </head>
    <body>
    </body>
    </html>

snippet home
    /Users/Cside

snippet ex
    use parent qw(Exporter);
    our @EXPORT_OK = qw();

snippet plack
    use Plack::Request;
    sub {
        my $req = Plack::Request->new($_[0]);
        given ($req->path) {
            when ('/') {
                $req->param('');
                return [200, ["Content-Type" => "text/html"], ['200 OK']];
            }
        }
        return [404, ["Content-Type" => "text/plain"], ['404 Not Found']];
    };

snippet file
    use Path::Class qw(file);
    my @lines = file(__FILE__)->dir->file()->slurp;

snippet r200
    [ 200, ['Content-Type', 'text/plain'], ['200 OK'] ]

snippet r404
    [ 404, ['Content-Type', 'text/plain'], ['404 Not Found'] ]

snippet psgi
    #!/usr/bin/env perl
    use 5.10.0;
    use strict;
    use warnings;
    use Plack::Builder;
    use Plack::Response;

    my $app = sub {
        my $env = shift;

        my $res = Plack::Response->new(200);
        $res->content_type('text/html');
        $res->body("Hello World");

        return $res->finalize;
    };

    builder {
        # enable '';
        $app;
    };

snippet coro
    use Coro;
    use Coro::LWP;

    my @coros;
    for () {
        push @coros, async {
        };
    }
    $_->join for @coros;
